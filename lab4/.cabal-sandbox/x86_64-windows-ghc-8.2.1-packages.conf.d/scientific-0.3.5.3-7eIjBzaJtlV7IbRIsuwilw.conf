name: scientific
version: 0.3.5.3
id: scientific-0.3.5.3-7eIjBzaJtlV7IbRIsuwilw
key: scientific-0.3.5.3-7eIjBzaJtlV7IbRIsuwilw
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    >>> read "1e1000000000" :: Scientific
    1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
indefinite: False
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: ad2fe8bfc2f35d5b7afc1b16d1eef458
trusted: False
import-dirs: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\x86_64-windows-ghc-8.2.1\scientific-0.3.5.3-7eIjBzaJtlV7IbRIsuwilw
library-dirs: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\x86_64-windows-ghc-8.2.1\scientific-0.3.5.3-7eIjBzaJtlV7IbRIsuwilw
dynamic-library-dirs: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\x86_64-windows-ghc-8.2.1
data-dir: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\x86_64-windows-ghc-8.2.1\scientific-0.3.5.3
hs-libraries: HSscientific-0.3.5.3-7eIjBzaJtlV7IbRIsuwilw
depends:
    base-4.10.0.0 integer-logarithms-1.0.2.1-3CWvUWK6HpLY5qKuoMl1A
    deepseq-1.4.3.0 text-1.2.3.0-JlJcXkrzMZ4FuW78lMinGM
    hashable-1.2.7.0-5QbJyWe4ACO2f1JyuL0PQu
    primitive-0.6.3.0-34Ly16zGGNgKmAkvvDRgPC containers-0.5.10.2
    binary-0.8.5.1 bytestring-0.10.8.2 integer-gmp-1.0.1.0
abi-depends: base-4.10.0.0=d468cc9c81adf88a21d24d120a60bbca
             integer-logarithms-1.0.2.1-3CWvUWK6HpLY5qKuoMl1A=1e318aff1ff283b8856b057e03559b76
             deepseq-1.4.3.0=8d45006e12966c64d2e6a709d96ad291
             text-1.2.3.0-JlJcXkrzMZ4FuW78lMinGM=55b19f551fe2e6bb8fdd5d66ff1f8fba
             hashable-1.2.7.0-5QbJyWe4ACO2f1JyuL0PQu=31f22e992ee22d02025b95eb34507036
             primitive-0.6.3.0-34Ly16zGGNgKmAkvvDRgPC=152444bda427db0e36e485aaef5059e7
             containers-0.5.10.2=a63a209cedc776893cc594a4d9ceb9bb
             binary-0.8.5.1=a394428bff5dd497e5c59cd41fb64c26
             bytestring-0.10.8.2=c562d1b1e05417eaef08ecf85924dd1e
             integer-gmp-1.0.1.0=ef0a5f93a1d36d51ce5a39a2c2994fdb
haddock-interfaces: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\doc\x86_64-windows-ghc-8.2.1\scientific-0.3.5.3\html\scientific.haddock
haddock-html: C:\Users\Gabriella\Desktop\haskell\lab4\.cabal-sandbox\doc\x86_64-windows-ghc-8.2.1\scientific-0.3.5.3\html
